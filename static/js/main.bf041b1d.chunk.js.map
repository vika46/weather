{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","Math","round","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAEMA,EAEG,mCAFHA,EAGI,2CAuEKC,MApEf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA4BA,OAEE,qBAAKC,UACqB,oBAAhBF,EAAQG,MAA0BC,KAAKC,MAAML,EAAQG,KAAKG,MAAQ,GAAM,WAC9E,MAFJ,SAGE,iCACE,qBAAKJ,UAAU,aAAf,SACE,uBAAOK,KAAK,OAAOL,UAAU,aAAaM,YAAY,YAAYC,SAAW,SAAAC,GAAC,OAAIX,EAASW,EAAEC,OAAOC,QACpGA,MAAQd,EACRe,WAnCO,SAAAC,GAEI,UAAZA,EAAIC,KAELC,MAAM,GAAD,OAAIrB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAWnB,EAAWmB,GAC5BrB,EAAS,IACTsB,QAAQC,IAAIF,WA6BW,oBAAhBpB,EAAQG,KACjB,gCACA,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQuB,KADX,IACkBvB,EAAQwB,IAAIC,WAE9B,qBAAKvB,UAAU,OAAf,SA9BY,SAACwB,GAEnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAqB1BE,CAAY,IAAIC,WAGlB,sBAAKlC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGE,KAAKC,MAAML,EAAQG,KAAKG,MAD3B,WAGA,qBAAKJ,UAAU,UAAf,SACCF,EAAQA,QAAQ,GAAGG,aAInB,SCzDEkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.bf041b1d.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst api =\n{\n    key: \"7c36503de65012532dc787a6f09a76fd\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n   \n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt =>\n  {\n      if(evt.key === \"Enter\")\n      {\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n          .then(res => res.json())\n          .then(result => {setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n      }\n  }\n\n  const dateBuilder = (d) =>\n  {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    \n    <div className={\n      (typeof weather.main != \"undefined\") ? ( (Math.round(weather.main.temp) > 25) ? 'app warm' : 'app' )\n      : 'app' }>\n      <main>\n        <div className=\"search-box\">\n          <input type=\"text\" className=\"search-bar\" placeholder=\"Search...\" onChange ={e => setQuery(e.target.value)}\n          value= {query}\n          onKeyPress={search}/>\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n        <div className=\"location-box\">\n          <div className=\"location\">\n            {weather.name},{weather.sys.country}\n          </div>\n          <div className=\"date\">\n           {dateBuilder(new Date())}\n          </div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}Â°C\n            </div>\n            <div className=\"weather\">\n            {weather.weather[0].main}\n            </div>\n            </div>\n          </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}