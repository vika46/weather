{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","t","useState","query","setQuery","weather","setWeather","search","evt","key","type","fetch","then","res","json","result","className","main","Math","round","temp","placeholder","onChange","e","target","value","onKeyPress","onClick","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","toLocaleString","hour","minute","hour12","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAEMA,EAEG,mCAFHA,EAGI,2CAiFKC,MA9Ef,WAEE,IA6BqBC,EA7BrB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAS,SAAAC,GAGI,UAAZA,EAAIC,KAAgC,UAAbD,EAAIE,MAE5BC,MAAM,GAAD,OAAIZ,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACvDa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAWT,EAAWS,GAC5BX,EAAS,QAuBjB,OAEE,qBAAKY,UACqB,oBAAhBX,EAAQY,MAA0BC,KAAKC,MAAMd,EAAQY,KAAKG,MAAQ,GAAM,WAC9E,MAFJ,SAGE,iCACE,sBAAKJ,UAAU,aAAf,UACE,uBAAON,KAAK,OAAOM,UAAU,aAAaK,YAAY,WAAWC,SAAW,SAAAC,GAAC,OAAInB,EAASmB,EAAEC,OAAOC,QACnGA,MAAQtB,EACRuB,WAAYnB,IACZ,qBAAKS,UAAY,SAAjB,SACA,wBAAQN,KAAM,SAASM,UAAW,MAAMW,QAASpB,EAAjD,yBAGuB,oBAAhBF,EAAQY,KACjB,gCACA,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGX,EAAQuB,KADX,IACkBvB,EAAQwB,IAAIC,WAE9B,sBAAKd,UAAU,OAAf,UArCY,SAACe,GAEnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA4B1BE,CAAY,IAAIC,MACjB,wBA3BYxC,EA4BC,IAAIwC,KA1BjBxC,EAAEyC,eAAe,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,WA6BzE,sBAAK7B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGE,KAAKC,MAAMd,EAAQY,KAAKG,MAD3B,WAGA,qBAAKJ,UAAU,UAAf,SACCX,EAAQA,QAAQ,GAAGY,aAInB,SCnEE6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.fd410442.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst api =\n{\n    key: \"7c36503de65012532dc787a6f09a76fd\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n   \n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt =>\n  {   \n    //console.log(evt);\n      if(evt.key === \"Enter\" || evt.type === \"click\")\n      {\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n          .then(res => res.json())\n          .then(result => {setWeather(result);\n          setQuery('');\n          //console.log(result);\n        });\n      }\n  }\n\n  const dateBuilder = (d) =>\n  {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  const timeBuilder = (t) =>\n  {\n    return t.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n  }\n\n  return (\n    \n    <div className={\n      (typeof weather.main != \"undefined\") ? ( (Math.round(weather.main.temp) > 25) ? 'app warm' : 'app' )\n      : 'app' }>\n      <main>\n        <div className=\"search-box\">\n          <input type=\"text\" className=\"search-bar\" placeholder=\"Enter...\" onChange ={e => setQuery(e.target.value)}\n          value= {query}\n          onKeyPress={search}/>\n          <div className = \"button\">\n          <button type =\"submit\" className =\"btn\" onClick={search}>Search</button>\n          </div>\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n        <div className=\"location-box\">\n          <div className=\"location\">\n            {weather.name},{weather.sys.country}\n          </div>\n          <div className=\"date\">\n           {dateBuilder(new Date())}\n           <br></br>\n           {timeBuilder(new Date())}\n          </div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}Â°C\n            </div>\n            <div className=\"weather\">\n            {weather.weather[0].main}\n            </div>\n            </div>\n          </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}